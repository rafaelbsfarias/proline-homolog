import { NextResponse } from 'next/server';
import { withAdminAuth, type AuthenticatedRequest } from '@/modules/common/utils/authMiddleware';
import { SupabaseService } from '@/modules/common/services/SupabaseService';
import { getLogger } from '@/modules/logger';
import { STATUS } from '@/modules/common/constants/status';
import { formatAddressLabel, normalizeAddressLabel } from '@/modules/common/utils/address';

const logger = getLogger('api:admin:propose-collection-date');

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';
export const revalidate = 0;

export const POST = withAdminAuth(async (req: AuthenticatedRequest) => {
  try {
    const body = await req.json();
    const clientId: string | undefined = body?.clientId;
    const addressId: string | undefined = body?.addressId;
    const new_date: string | undefined = body?.new_date;
    if (!clientId || !addressId || !new_date) {
      return NextResponse.json(
        { success: false, error: 'clientId, addressId e new_date são obrigatórios' },
        { status: 400 }
      );
    }

    const admin = SupabaseService.getInstance().getAdminClient();

    // 1) Obter label do endereço
    const { data: addr, error: addrErr } = await admin
      .from('addresses')
      .select('id, street, number, city')
      .eq('id', addressId)
      .maybeSingle();
    if (addrErr || !addr) {
      return NextResponse.json({ success: false, error: 'Endereço inválido' }, { status: 400 });
    }
    const addressLabel = formatAddressLabel(addr);

    // 2) Verificar existência de precificação (fee) com comparação determinística pelo label normalizado
    const needle = normalizeAddressLabel(addressLabel);
    const { data: allRows, error: rowsErr } = await admin
      .from('vehicle_collections')
      .select('id, collection_fee_per_vehicle, collection_address, collection_date, status')
      .eq('client_id', clientId)
      .in('status', [STATUS.REQUESTED, STATUS.APPROVED]);
    if (rowsErr) {
      logger.warn('load_collections_failed', { error: rowsErr.message, clientId, addressLabel });
    }
    const candidates = (allRows || []).filter(r => normalizeAddressLabel(String(r.collection_address || '')) === needle);
    candidates.sort((a: any, b: any) => String(b.collection_date || '').localeCompare(String(a.collection_date || '')));
    const vcRow = candidates[0] || null;
    const hasFee = typeof vcRow?.collection_fee_per_vehicle === 'number' && vcRow.collection_fee_per_vehicle > 0;
    if (!vcRow?.id || !hasFee) {
      return NextResponse.json(
        { success: false, error: 'Precifique o endereço antes de propor uma data de coleta.' },
        { status: 400 }
      );
    }

    // 3) Atualizar proposta de data na vehicle_collections existente
    if (vcRow?.id) {
      const { error } = await admin
        .from('vehicle_collections')
        .update({ collection_date: new_date })
        .eq('id', vcRow.id);
      if (error) {
        logger.error('update_collection_failed', { error: error.message, clientId, addressLabel });
        return NextResponse.json(
          { success: false, error: 'Falha ao atualizar proposta' },
          { status: 500 }
        );
      }
    }

    // 4) Atualizar veículos do cliente nesse endereço para indicar que há solicitação de mudança
    // Não alteramos a estimated_arrival_date aqui — a nova data fica registrada na collection.
    const allowedPrev = [STATUS.PONTO_COLETA_SELECIONADO, STATUS.AGUARDANDO_APROVACAO];
    const { error: vehErr } = await admin
      .from('vehicles')
      .update({ status: STATUS.SOLICITACAO_MUDANCA_DATA })
      .eq('client_id', clientId)
      .eq('pickup_address_id', addressId)
      .in('status', allowedPrev);
    if (vehErr) {
      logger.error('vehicles_update_failed', { error: vehErr.message, clientId, addressId });
      return NextResponse.json(
        { success: false, error: 'Erro ao atualizar veículos' },
        { status: 500 }
      );
    }

    return NextResponse.json({ success: true });
  } catch (e: any) {
    logger.error('unhandled', { error: e?.message });
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
});
