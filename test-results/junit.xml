<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="208" failures="9" errors="0" time="3.421613228">
    <testsuite name="test/unit/set-vehicles-collection.test.ts" timestamp="2025-10-18T22:47:55.390Z" hostname="pop-os" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="test/unit/set-vehicles-collection.test.ts" name="test/unit/set-vehicles-collection.test.ts" time="0">
            <failure message="No test suite found in file /home/rafael/workspace/proline-homolog/test/unit/set-vehicles-collection.test.ts" type="Error">
Error: No test suite found in file /home/rafael/workspace/proline-homolog/test/unit/set-vehicles-collection.test.ts
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/client/api/accept-proposal.test.ts" timestamp="2025-10-18T22:47:55.393Z" hostname="pop-os" tests="2" failures="0" errors="0" skipped="0" time="0.014445296">
        <testcase classname="tests/client/api/accept-proposal.test.ts" name="client accept proposal API &gt; links vehicles to collection_id and approves collection on final acceptance" time="0.010231124">
        </testcase>
        <testcase classname="tests/client/api/accept-proposal.test.ts" name="client accept proposal API &gt; finalizes in one click when starting from SOLICITAÇÃO DE MUDANÇA DE DATA" time="0.002501133">
        </testcase>
    </testsuite>
    <testsuite name="tests/admin/summary/history-no-fallback.mocked.test.ts" timestamp="2025-10-18T22:47:55.394Z" hostname="pop-os" tests="1" failures="0" errors="0" skipped="0" time="0.002560217">
        <testcase classname="tests/admin/summary/history-no-fallback.mocked.test.ts" name="clientCollectionsSummary - no fallback for history &gt; keeps collectionHistory empty when no detailed snapshot exists" time="0.001538377">
        </testcase>
    </testsuite>
    <testsuite name="tests/admin/summary/history-source.mocked.test.ts" timestamp="2025-10-18T22:47:55.394Z" hostname="pop-os" tests="1" failures="1" errors="0" skipped="0" time="0.011663312">
        <testcase classname="tests/admin/summary/history-source.mocked.test.ts" name="clientCollectionsSummary - uses detailed immutable history &gt; preserves vehicles/plates from detailed snapshot without enrich()" time="0.010146336">
            <failure message="expected [] to have a length of 1 but got +0" type="AssertionError">
AssertionError: expected [] to have a length of 1 but got +0

- Expected
+ Received

- 1
+ 0

 ❯ tests/admin/summary/history-source.mocked.test.ts:103:35
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/admin/api/accept-client-proposed-date.test.ts" timestamp="2025-10-18T22:47:55.396Z" hostname="pop-os" tests="1" failures="0" errors="0" skipped="0" time="0.010384627">
        <testcase classname="tests/admin/api/accept-client-proposed-date.test.ts" name="admin accept-client-proposed-date (integrated with orchestrator) &gt; creates requested if missing, links vehicles, sets status, approves collection" time="0.009116567">
        </testcase>
    </testsuite>
    <testsuite name="tests/admin/api/propose-collection-date.test.ts" timestamp="2025-10-18T22:47:55.396Z" hostname="pop-os" tests="1" failures="1" errors="0" skipped="0" time="0.014239498">
        <testcase classname="tests/admin/api/propose-collection-date.test.ts" name="admin propose-collection-date (integrated with orchestrator) &gt; upserts requested, syncs dates, links vehicles, and removes old requested orphans" time="0.012633964">
            <failure message="expected { id: &apos;oldReq&apos;, client_id: &apos;c1&apos;, …(4) } to be undefined" type="AssertionError">
AssertionError: expected { id: &apos;oldReq&apos;, client_id: &apos;c1&apos;, …(4) } to be undefined

- Expected: 
undefined

+ Received: 
{
  &quot;client_id&quot;: &quot;c1&quot;,
  &quot;collection_address&quot;: &quot;Rua X, 1 - Y&quot;,
  &quot;collection_date&quot;: &quot;2025-09-12&quot;,
  &quot;collection_fee_per_vehicle&quot;: 120,
  &quot;id&quot;: &quot;oldReq&quot;,
  &quot;status&quot;: &quot;requested&quot;,
}

 ❯ tests/admin/api/propose-collection-date.test.ts:221:25
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/common/services/collection-orchestrator.test.ts" timestamp="2025-10-18T22:47:55.396Z" hostname="pop-os" tests="4" failures="0" errors="0" skipped="0" time="0.004168322">
        <testcase classname="tests/common/services/collection-orchestrator.test.ts" name="CollectionOrchestrator &gt; upserts a requested collection and prevents overwriting approved" time="0.002112903">
        </testcase>
        <testcase classname="tests/common/services/collection-orchestrator.test.ts" name="CollectionOrchestrator &gt; syncs vehicle dates only for allowed statuses" time="0.000348477">
        </testcase>
        <testcase classname="tests/common/services/collection-orchestrator.test.ts" name="CollectionOrchestrator &gt; links vehicles to a collection by address/date and allowed statuses" time="0.000386704">
        </testcase>
        <testcase classname="tests/common/services/collection-orchestrator.test.ts" name="CollectionOrchestrator &gt; approves a requested collection" time="0.0003">
        </testcase>
    </testsuite>
    <testsuite name="app/api/admin/create-vehicle/route.test.ts" timestamp="2025-10-18T22:47:55.397Z" hostname="pop-os" tests="1" failures="1" errors="0" skipped="0" time="0.010594991">
        <testcase classname="app/api/admin/create-vehicle/route.test.ts" name="POST /api/admin/create-vehicle &gt; adiciona veículo para cliente com sucesso (admin)" time="0.009156788">
            <failure message="expected 403 to be 200 // Object.is equality" type="AssertionError">
AssertionError: expected 403 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 403

 ❯ app/api/admin/create-vehicle/route.test.ts:82:24
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/api/partner/partner-services-v2.integration.test.ts" timestamp="2025-10-18T22:47:55.397Z" hostname="pop-os" tests="31" failures="1" errors="0" skipped="30" time="0.011026755">
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; POST /api/partner/services/v2 - Criar Serviço &gt; deve criar serviço com dados válidos" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; POST /api/partner/services/v2 - Criar Serviço &gt; deve rejeitar criação sem autenticação" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; POST /api/partner/services/v2 - Criar Serviço &gt; deve rejeitar dados inválidos - nome vazio" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; POST /api/partner/services/v2 - Criar Serviço &gt; deve rejeitar dados inválidos - preço negativo" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; POST /api/partner/services/v2 - Criar Serviço &gt; deve rejeitar dados inválidos - descrição muito longa" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; GET /api/partner/services/v2 - Listar Serviços &gt; deve listar serviços do parceiro autenticado" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; GET /api/partner/services/v2 - Listar Serviços &gt; deve rejeitar listagem sem autenticação" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; GET /api/partner/services/v2 - Listar Serviços &gt; deve suportar paginação" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; GET /api/partner/services/v2 - Listar Serviços &gt; deve suportar filtro por nome" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; GET /api/partner/services/v2 - Listar Serviços &gt; deve rejeitar parâmetros de paginação inválidos" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; GET /api/partner/services/v2/{serviceId} - Buscar Serviço Específico &gt; deve retornar serviço específico do parceiro" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; GET /api/partner/services/v2/{serviceId} - Buscar Serviço Específico &gt; deve rejeitar acesso sem autenticação" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; GET /api/partner/services/v2/{serviceId} - Buscar Serviço Específico &gt; deve retornar 404 para serviço inexistente" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; GET /api/partner/services/v2/{serviceId} - Buscar Serviço Específico &gt; deve rejeitar acesso a serviço de outro parceiro" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; PUT /api/partner/services/v2/{serviceId} - Atualizar Serviço &gt; deve atualizar serviço com dados válidos" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; PUT /api/partner/services/v2/{serviceId} - Atualizar Serviço &gt; deve atualizar apenas campos fornecidos" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; PUT /api/partner/services/v2/{serviceId} - Atualizar Serviço &gt; deve rejeitar atualização sem autenticação" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; PUT /api/partner/services/v2/{serviceId} - Atualizar Serviço &gt; deve rejeitar atualização de serviço inexistente" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; PUT /api/partner/services/v2/{serviceId} - Atualizar Serviço &gt; deve rejeitar dados inválidos na atualização" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; DELETE /api/partner/services/v2/{serviceId} - Desativar Serviço &gt; deve desativar serviço com sucesso" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; DELETE /api/partner/services/v2/{serviceId} - Desativar Serviço &gt; deve rejeitar desativação sem autenticação" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; DELETE /api/partner/services/v2/{serviceId} - Desativar Serviço &gt; deve rejeitar desativação de serviço inexistente" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; DELETE /api/partner/services/v2/{serviceId} - Desativar Serviço &gt; deve permitir desativação de serviço já desativado" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; Cenários de Borda e Casos Especiais &gt; deve lidar com IDs malformados" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; Cenários de Borda e Casos Especiais &gt; deve lidar com corpo de requisição vazio" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; Cenários de Borda e Casos Especiais &gt; deve lidar com JSON malformado" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; Cenários de Borda e Casos Especiais &gt; deve lidar com limite de paginação máximo" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; Cenários de Borda e Casos Especiais &gt; deve lidar com caracteres especiais no nome" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; Performance e Limites &gt; deve responder dentro do tempo limite" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração &gt; Performance e Limites &gt; deve lidar com muitos serviços na paginação" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.integration.test.ts" name="PartnerService API v2 - Integração" time="0.005878414">
            <failure message="Cannot destructure property &apos;data&apos; of &apos;(intermediate value)&apos; as it is undefined." type="TypeError">
TypeError: Cannot destructure property &apos;data&apos; of &apos;(intermediate value)&apos; as it is undefined.
 ❯ tests/integration/api/partner/partner-services-v2.integration.test.ts:29:19
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/api/partner/partner-services-v2.performance.test.ts" timestamp="2025-10-18T22:47:55.400Z" hostname="pop-os" tests="4" failures="4" errors="0" skipped="0" time="3.115407836">
        <testcase classname="tests/integration/api/partner/partner-services-v2.performance.test.ts" name="PartnerService API v2 - Performance &gt; Tempo de Resposta &gt; deve responder operações básicas em menos de 200ms" time="2.27944076">
            <failure message="expected 401 to be 200 // Object.is equality" type="AssertionError">
AssertionError: expected 401 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 401

 ❯ tests/integration/api/partner/partner-services-v2.performance.test.ts:30:31
            </failure>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.performance.test.ts" name="PartnerService API v2 - Performance &gt; Tempo de Resposta &gt; deve responder criação em menos de 500ms" time="0.30683099">
            <failure message="expected 401 to be 201 // Object.is equality" type="AssertionError">
AssertionError: expected 401 to be 201 // Object.is equality

- Expected
+ Received

- 201
+ 401

 ❯ tests/integration/api/partner/partner-services-v2.performance.test.ts:55:31
            </failure>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.performance.test.ts" name="PartnerService API v2 - Performance &gt; Cenários Básicos de Performance &gt; deve lidar com paginação extrema" time="0.27133903">
            <failure message="expected 401 to be 200 // Object.is equality" type="AssertionError">
AssertionError: expected 401 to be 200 // Object.is equality

- Expected
+ Received

- 200
+ 401

 ❯ tests/integration/api/partner/partner-services-v2.performance.test.ts:76:31
            </failure>
        </testcase>
        <testcase classname="tests/integration/api/partner/partner-services-v2.performance.test.ts" name="PartnerService API v2 - Performance &gt; Cenários Básicos de Performance &gt; deve validar tokens rapidamente" time="0.256423372">
            <failure message="expected 255 to be less than 100" type="AssertionError">
AssertionError: expected 255 to be less than 100
 ❯ tests/integration/api/partner/partner-services-v2.performance.test.ts:96:30
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="modules/partner/checklist/application/__tests__/domain-entities.test.ts" timestamp="2025-10-18T22:47:55.402Z" hostname="pop-os" tests="29" failures="0" errors="0" skipped="0" time="0.009359804">
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; create &gt; deve criar PartnerService com dados válidos" time="0.001532552">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; create &gt; deve falhar com ID vazio" time="0.000242777">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; create &gt; deve falhar com partner ID vazio" time="0.000276683">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; create &gt; deve falhar com nome inválido" time="0.000153232">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; create &gt; deve falhar com preço inválido" time="0.000225303">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; create &gt; deve falhar com descrição inválida" time="0.000132854">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; reconstruct &gt; deve reconstruir PartnerService a partir de dados persistidos" time="0.000576183">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; updateName &gt; deve atualizar nome com sucesso" time="0.000303091">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; updateName &gt; deve falhar com nome inválido" time="0.000149591">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; updatePrice &gt; deve atualizar preço com sucesso" time="0.000207019">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; updatePrice &gt; deve falhar com preço inválido" time="0.000114902">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; updateDescription &gt; deve atualizar descrição com sucesso" time="0.000215079">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; updateMultiple &gt; deve atualizar múltiplas propriedades com sucesso" time="0.000208884">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; updateMultiple &gt; deve atualizar apenas propriedades fornecidas" time="0.000274318">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; updateMultiple &gt; deve falhar se alguma propriedade for inválida" time="0.000149202">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; deactivate/reactivate &gt; deve desativar serviço" time="0.000143379">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; deactivate/reactivate &gt; deve reativar serviço" time="0.000101474">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; business logic methods &gt; canBeOffered deve retornar true para serviço ativo" time="0.000141599">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; business logic methods &gt; canBeOffered deve retornar false para serviço inativo" time="0.000082843">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; business logic methods &gt; belongsToPartner deve funcionar corretamente" time="0.000088271">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; business logic methods &gt; nameContains deve funcionar corretamente" time="0.000148304">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; business logic methods &gt; descriptionContains deve funcionar corretamente" time="0.000106902">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; business logic methods &gt; isPriceInRange deve funcionar corretamente" time="0.000131667">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; business logic methods &gt; calculateDiscountedPrice deve calcular desconto corretamente" time="0.000161905">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; business logic methods &gt; calculateDiscountedPrice deve falhar com percentual inválido" time="0.000097221">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; toJSON &gt; deve retornar representação JSON correta" time="0.000630047">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; equals &gt; deve retornar true para serviços com mesmo ID" time="0.00013616">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; equals &gt; deve retornar false para serviços com IDs diferentes" time="0.000089206">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/domain-entities.test.ts" name="PartnerService &gt; imutabilidade &gt; deve ser imutável após criação" time="0.000811479">
        </testcase>
    </testsuite>
    <testsuite name="modules/partner/checklist/application/__tests__/phase3-real-infrastructure.test.ts" timestamp="2025-10-18T22:47:55.405Z" hostname="pop-os" tests="4" failures="0" errors="0" skipped="0" time="0.092850428">
        <testcase classname="modules/partner/checklist/application/__tests__/phase3-real-infrastructure.test.ts" name="Fase 3 - Infraestrutura Real &gt; Estrutura dos arquivos &gt; deve ter os arquivos de infraestrutura criados" time="0.089887767">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase3-real-infrastructure.test.ts" name="Fase 3 - Infraestrutura Real &gt; Estrutura dos arquivos &gt; deve ter as classes de repositório exportadas" time="0.000674003">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase3-real-infrastructure.test.ts" name="Fase 3 - Infraestrutura Real &gt; Estrutura dos arquivos &gt; deve ter as classes de serviço exportadas" time="0.000592207">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase3-real-infrastructure.test.ts" name="Fase 3 - Infraestrutura Real &gt; Configuração da infraestrutura &gt; deve exportar a configuração completa" time="0.000348703">
        </testcase>
    </testsuite>
    <testsuite name="modules/partner/checklist/application/__tests__/phase4-2-migration-checklist-service.test.ts" timestamp="2025-10-18T22:47:55.405Z" hostname="pop-os" tests="4" failures="0" errors="0" skipped="0" time="0.005172998">
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-2-migration-checklist-service.test.ts" name="Fase 4.2 - Migração ChecklistService.loadChecklistWithDetails() &gt; Feature Flag Control &gt; deve ter a propriedade USE_DDD_CHECKLIST configurável" time="0.001406338">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-2-migration-checklist-service.test.ts" name="Fase 4.2 - Migração ChecklistService.loadChecklistWithDetails() &gt; Feature Flag Control &gt; deve ser capaz de chamar loadChecklistWithDetails sem erros" time="0.001174654">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-2-migration-checklist-service.test.ts" name="Fase 4.2 - Migração ChecklistService.loadChecklistWithDetails() &gt; Backward Compatibility &gt; deve retornar um objeto com a estrutura esperada" time="0.000717333">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-2-migration-checklist-service.test.ts" name="Fase 4.2 - Migração ChecklistService.loadChecklistWithDetails() &gt; Backward Compatibility &gt; deve aceitar os mesmos parâmetros" time="0.000653991">
        </testcase>
    </testsuite>
    <testsuite name="modules/partner/checklist/application/__tests__/phase4-3-migration-api.test.ts" timestamp="2025-10-18T22:47:55.406Z" hostname="pop-os" tests="10" failures="0" errors="0" skipped="0" time="0.013668997">
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-3-migration-api.test.ts" name="Fase 4.3 - Migração APIs de produção &gt; Feature Flag Control &gt; Submit Checklist API &gt; deve usar implementação legacy quando USE_DDD_CHECKLIST_SUBMIT=false" time="0.0016371">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-3-migration-api.test.ts" name="Fase 4.3 - Migração APIs de produção &gt; Feature Flag Control &gt; Submit Checklist API &gt; deve tentar usar implementação DDD quando USE_DDD_CHECKLIST_SUBMIT=true" time="0.000344921">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-3-migration-api.test.ts" name="Fase 4.3 - Migração APIs de produção &gt; Feature Flag Control &gt; Save Anomalies API &gt; deve usar implementação legacy quando USE_DDD_CHECKLIST_ANOMALIES=false" time="0.001231412">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-3-migration-api.test.ts" name="Fase 4.3 - Migração APIs de produção &gt; Feature Flag Control &gt; Save Anomalies API &gt; deve tentar usar implementação DDD quando USE_DDD_CHECKLIST_ANOMALIES=true" time="0.000286671">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-3-migration-api.test.ts" name="Fase 4.3 - Migração APIs de produção &gt; Feature Flag Control &gt; Init Checklist API &gt; deve usar implementação legacy quando USE_DDD_CHECKLIST_INIT=false" time="0.000679058">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-3-migration-api.test.ts" name="Fase 4.3 - Migração APIs de produção &gt; Feature Flag Control &gt; Init Checklist API &gt; deve tentar usar implementação DDD quando USE_DDD_CHECKLIST_INIT=true" time="0.000343375">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-3-migration-api.test.ts" name="Fase 4.3 - Migração APIs de produção &gt; Backward Compatibility &gt; deve aceitar os mesmos parâmetros do submit checklist" time="0.000363792">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-3-migration-api.test.ts" name="Fase 4.3 - Migração APIs de produção &gt; Backward Compatibility &gt; deve aceitar os mesmos parâmetros do save anomalies" time="0.001473374">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-3-migration-api.test.ts" name="Fase 4.3 - Migração APIs de produção &gt; Backward Compatibility &gt; deve aceitar os mesmos parâmetros do init checklist" time="0.002194437">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-3-migration-api.test.ts" name="Fase 4.3 - Migração APIs de produção &gt; Error Handling &gt; deve fazer fallback graceful quando DDD falha" time="0.000410086">
        </testcase>
    </testsuite>
    <testsuite name="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" timestamp="2025-10-18T22:47:55.407Z" hostname="pop-os" tests="14" failures="0" errors="0" skipped="0" time="0.008206615">
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Coleta de Métricas &gt; deve registrar uso de API DDD corretamente" time="0.001916323">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Coleta de Métricas &gt; deve registrar uso de API Legacy corretamente" time="0.000484377">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Coleta de Métricas &gt; deve registrar fallbacks corretamente" time="0.000552258">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Coleta de Métricas &gt; deve manter apenas últimas 100 medições de performance" time="0.001139737">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Cálculo de Estatísticas &gt; deve calcular taxa de adoção corretamente" time="0.000375499">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Cálculo de Estatísticas &gt; deve calcular melhoria de performance" time="0.000203999">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Cálculo de Estatísticas &gt; deve calcular redução de erros" time="0.000164769">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Sistema de Alertas &gt; deve criar alerta para taxa de erro crítica" time="0.000205508">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Sistema de Alertas &gt; deve criar alerta para performance degradada" time="0.00033596">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Sistema de Alertas &gt; deve criar alerta para alta taxa de fallback" time="0.000514464">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Sistema de Alertas &gt; deve resolver alertas" time="0.000280811">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Relatório de Migração &gt; deve gerar relatório completo" time="0.00033571">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Relatório de Migração &gt; deve incluir estatísticas no relatório" time="0.000200873">
        </testcase>
        <testcase classname="modules/partner/checklist/application/__tests__/phase4-4-migration-monitoring.test.ts" name="Fase 4.4 - Rollout Controlado e Monitoramento &gt; Thresholds de Alerta &gt; deve ter thresholds configurados corretamente" time="0.000232907">
        </testcase>
    </testsuite>
    <testsuite name="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" timestamp="2025-10-18T22:47:55.408Z" hostname="pop-os" tests="20" failures="0" errors="0" skipped="0" time="0.015311917">
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; findById &gt; deve retornar serviço quando encontrado" time="0.002470082">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; findById &gt; deve retornar null quando serviço não encontrado" time="0.00047779">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; findById &gt; deve retornar null quando ocorre erro" time="0.000421129">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; findAll &gt; deve retornar lista de serviços" time="0.000983526">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; findAll &gt; deve retornar lista vazia quando ocorre erro" time="0.000752506">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; save &gt; deve salvar serviço com sucesso" time="0.000702938">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; save &gt; deve lançar erro quando falha ao salvar" time="0.001246023">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; delete &gt; deve deletar serviço com sucesso" time="0.000512497">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; delete &gt; deve lançar erro quando falha ao deletar" time="0.000475195">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; findByPartnerId &gt; deve retornar serviços do parceiro" time="0.000640206">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; findActiveByPartnerId &gt; deve retornar apenas serviços ativos do parceiro" time="0.000477291">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; findByName &gt; deve buscar serviços por nome" time="0.000485972">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; countByPartnerId &gt; deve contar serviços do parceiro" time="0.000272395">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; countByPartnerId &gt; deve retornar 0 quando ocorre erro" time="0.000518935">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; existsByNameForPartner &gt; deve retornar true quando serviço existe" time="0.000338339">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; existsByNameForPartner &gt; deve retornar false quando serviço não existe" time="0.000284258">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; deactivateAllByPartnerId &gt; deve desativar serviços com sucesso" time="0.000307057">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; deactivateAllByPartnerId &gt; deve retornar 0 quando ocorre erro" time="0.000299094">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; findWithPagination &gt; deve retornar serviços paginados" time="0.000939531">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/repositories/SupabasePartnerServiceRepository.test.ts" name="SupabasePartnerServiceRepository &gt; findWithPagination &gt; deve retornar resultado vazio quando ocorre erro" time="0.000537573">
        </testcase>
    </testsuite>
    <testsuite name="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" timestamp="2025-10-18T22:47:55.410Z" hostname="pop-os" tests="23" failures="0" errors="0" skipped="0" time="0.007334823">
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; create &gt; deve criar ServiceDescription com descrição válida" time="0.001145257">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; create &gt; deve falhar com descrição vazia" time="0.000322084">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; create &gt; deve falhar com descrição apenas espaços" time="0.000347573">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; create &gt; deve falhar com descrição muito curta" time="0.000334897">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; create &gt; deve falhar com descrição muito longa" time="0.000347648">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; create &gt; deve aceitar descrição no limite máximo" time="0.00032068">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; create &gt; deve aceitar descrição com espaços internos" time="0.000288508">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; create &gt; deve falhar com espaços no início" time="0.00027212">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; create &gt; deve falhar com espaços no fim" time="0.000180776">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; create &gt; deve falhar com caracteres de controle" time="0.000151313">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; summary &gt; deve retornar resumo para descrições longas" time="0.0001699">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; summary &gt; deve retornar descrição completa para textos curtos" time="0.000092747">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; length &gt; deve retornar o comprimento correto da descrição" time="0.000091056">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; equals &gt; deve retornar true para descrições iguais" time="0.000327709">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; equals &gt; deve retornar false para descrições diferentes" time="0.000134935">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; equals &gt; deve ser case sensitive" time="0.000093821">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; contains &gt; deve encontrar palavra-chave existente" time="0.000119672">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; contains &gt; deve retornar false para palavra-chave inexistente" time="0.000081485">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; contains &gt; deve ser case insensitive" time="0.000084038">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; toString &gt; deve retornar o valor como string" time="0.000139595">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; toJSON &gt; deve retornar o valor para serialização JSON" time="0.000089296">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; value getter &gt; deve retornar o valor interno" time="0.000065854">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceDescription.test.ts" name="ServiceDescription &gt; imutabilidade &gt; deve ser imutável após criação" time="0.000578008">
        </testcase>
    </testsuite>
    <testsuite name="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" timestamp="2025-10-18T22:47:55.415Z" hostname="pop-os" tests="16" failures="0" errors="0" skipped="0" time="0.005795317">
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; create &gt; deve criar ServiceName com nome válido" time="0.001140055">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; create &gt; deve falhar com nome vazio" time="0.000351598">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; create &gt; deve falhar com nome apenas espaços" time="0.000245193">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; create &gt; deve falhar com nome muito curto" time="0.000227825">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; create &gt; deve falhar com nome muito longo" time="0.000212363">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; create &gt; deve falhar com caracteres especiais perigosos" time="0.000313113">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; create &gt; deve aceitar nome com espaços internos" time="0.000105329">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; create &gt; deve falhar com espaços no início" time="0.000200372">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; create &gt; deve falhar com espaços no fim" time="0.000175496">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; equals &gt; deve retornar true para nomes iguais" time="0.000168403">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; equals &gt; deve retornar false para nomes diferentes" time="0.000099241">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; equals &gt; deve ser case sensitive" time="0.000085511">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; toString &gt; deve retornar o valor como string" time="0.000142524">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; toJSON &gt; deve retornar o valor para serialização JSON" time="0.00020096">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; value getter &gt; deve retornar o valor interno" time="0.000197995">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServiceName.test.ts" name="ServiceName &gt; imutabilidade &gt; deve ser imutável após criação" time="0.000629291">
        </testcase>
    </testsuite>
    <testsuite name="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" timestamp="2025-10-18T22:47:55.418Z" hostname="pop-os" tests="21" failures="0" errors="0" skipped="0" time="0.049857263">
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; create &gt; deve criar ServicePrice com preço válido (número)" time="0.038478559">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; create &gt; deve criar ServicePrice com preço válido (string)" time="0.000828878">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; create &gt; deve falhar com preço negativo" time="0.000783765">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; create &gt; deve falhar com preço muito alto" time="0.00072905">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; create &gt; deve falhar com string inválida" time="0.00037388">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; create &gt; deve falhar com NaN" time="0.000284363">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; create &gt; deve falhar com Infinity" time="0.000289033">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; create &gt; deve aceitar preço zero" time="0.000428789">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; create &gt; deve aceitar preço com 2 casas decimais" time="0.000426638">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; create &gt; deve falhar com mais de 2 casas decimais" time="0.0004198">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; formatted &gt; deve formatar corretamente valores inteiros" time="0.000408467">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; formatted &gt; deve formatar corretamente valores decimais" time="0.000333681">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; equals &gt; deve retornar true para preços iguais" time="0.000287911">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; equals &gt; deve retornar false para preços diferentes" time="0.000428151">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; equals &gt; deve comparar corretamente preços próximos" time="0.000243653">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; comparisons &gt; isGreaterThan deve funcionar corretamente" time="0.00028712">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; comparisons &gt; isLessThan deve funcionar corretamente" time="0.000253733">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; toString &gt; deve retornar o preço formatado" time="0.000425708">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; toJSON &gt; deve retornar o valor numérico para JSON" time="0.000273401">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; value getter &gt; deve retornar o valor numérico interno" time="0.000299748">
        </testcase>
        <testcase classname="modules/partner/domain/__tests__/value-objects/ServicePrice.test.ts" name="ServicePrice &gt; imutabilidade &gt; deve ser imutável após criação" time="0.001045389">
        </testcase>
    </testsuite>
    <testsuite name="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" timestamp="2025-10-18T22:47:55.420Z" hostname="pop-os" tests="20" failures="0" errors="0" skipped="0" time="0.019564212">
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; createService &gt; deve criar serviço com sucesso" time="0.007067493">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; createService &gt; deve falhar ao tentar criar serviço com nome duplicado" time="0.000917241">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; createService &gt; deve falhar quando validação do serviço falha" time="0.000672576">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; updateService &gt; deve atualizar serviço com sucesso" time="0.003398979">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; updateService &gt; deve falhar quando serviço não existe" time="0.000377623">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; updateService &gt; deve falhar quando nome já existe para outro serviço do mesmo parceiro" time="0.000255522">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; deactivateService &gt; deve desativar serviço com sucesso" time="0.00047398">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; deactivateService &gt; deve falhar quando serviço já está desativado" time="0.000299994">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; activateService &gt; deve reativar serviço com sucesso" time="0.000533847">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; activateService &gt; deve falhar quando serviço já está ativo" time="0.000402138">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; getServiceById &gt; deve retornar serviço quando encontrado" time="0.000321304">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; getServiceById &gt; deve retornar null quando serviço não encontrado" time="0.000170882">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; getServicesByPartner &gt; deve retornar serviços paginados do parceiro" time="0.00047537">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; searchServicesByName &gt; deve buscar serviços por nome sem filtro de parceiro" time="0.000431229">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; searchServicesByName &gt; deve buscar serviços por nome com filtro de parceiro" time="0.000634931">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; validateServiceNameUniqueness &gt; deve retornar true quando nome é único" time="0.000259604">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; validateServiceNameUniqueness &gt; deve retornar false quando nome já existe" time="0.000165251">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; validateServiceNameUniqueness &gt; deve excluir serviço específico da validação quando informado" time="0.00024294">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; deactivateAllServices &gt; deve desativar todos os serviços do parceiro" time="0.000308871">
        </testcase>
        <testcase classname="modules/partner/domain/application/__tests__/services/PartnerServiceApplicationServiceImpl.test.ts" name="PartnerServiceApplicationServiceImpl &gt; countActiveServices &gt; deve contar serviços ativos do parceiro" time="0.000245257">
        </testcase>
    </testsuite>
</testsuites>
