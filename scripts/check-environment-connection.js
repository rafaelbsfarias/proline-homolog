/**
 * Script para Verificar Ambiente e Conex√£o
 * Confirma se estamos no ambiente correto e conectados ao banco certo
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

console.log('üîç VERIFICANDO AMBIENTE E CONEX√ÉO');
console.log('='.repeat(50));

console.log(`üåê SUPABASE_URL: ${SUPABASE_URL}`);
console.log(`üîë SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ Presente' : '‚ùå Ausente'}`);

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function checkEnvironment() {
  try {
    console.log('\nüîó TESTANDO CONEX√ÉO COM O BANCO...');

    // Teste b√°sico de conex√£o
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);

    if (testError) {
      console.error('‚ùå Erro de conex√£o:', testError.message);
      return;
    }

    console.log('‚úÖ Conex√£o estabelecida com sucesso');

    // Verificar se estamos no ambiente correto
    console.log('\nüè¢ VERIFICANDO AMBIENTE...');

    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, full_name, role')
      .limit(5);

    if (profilesError) {
      console.error('‚ùå Erro ao buscar perfis:', profilesError.message);
      return;
    }

    console.log(`üìä Perfis encontrados: ${profiles?.length || 0}`);

    if (profiles && profiles.length > 0) {
      console.log('üèÜ Amostra de perfis:');
      profiles.forEach((profile, index) => {
        console.log(`   ${index + 1}. ${profile.full_name || 'N/A'} (${profile.role})`);
      });
    }

    // Verificar servi√ßos novamente
    console.log('\nüìã VERIFICANDO SERVI√áOS NOVAMENTE...');

    const { data: services, error: servicesError } = await supabase
      .from('partner_services')
      .select('*');

    if (servicesError) {
      console.error('‚ùå Erro ao buscar servi√ßos:', servicesError.message);
      return;
    }

    console.log(`üìä Total de servi√ßos: ${services?.length || 0}`);

    if (services && services.length > 0) {
      console.log('üèÜ Servi√ßos encontrados:');
      services.forEach((service, index) => {
        console.log(
          `   ${index + 1}. ${service.name} - R$ ${service.price} (${service.category || 'sem categoria'})`
        );
      });
    }

    // Verificar se h√° dados mock ou cache
    console.log('\nüîç VERIFICANDO POSS√çVEIS FONTES ALTERNATIVAS...');

    // Verificar se h√° arquivos est√°ticos
    console.log('‚ÑπÔ∏è  Verificando se h√° arquivos JSON ou dados est√°ticos...');

    // Verificar se h√° localStorage ou sessionStorage simulados
    console.log('‚ÑπÔ∏è  Verificando se h√° dados em cache do navegador...');

    // Verificar se h√° problemas de RLS
    console.log('\nüîê VERIFICANDO POL√çTICAS RLS...');

    const { data: rlsTest, error: rlsError } = await supabase
      .from('partner_services')
      .select('*')
      .limit(1);

    if (rlsError) {
      console.log(`‚ö†Ô∏è  Poss√≠vel problema de RLS: ${rlsError.message}`);
    } else {
      console.log('‚úÖ RLS parece estar funcionando');
    }

    // Diagn√≥stico final
    console.log('\nüéØ DIAGN√ìSTICO DO AMBIENTE:');
    console.log('='.repeat(50));

    if ((services?.length || 0) === 0) {
      console.log('‚ùå BANCO VAZIO: Nenhum servi√ßo encontrado');
      console.log('üí° Isso confirma que os dados na interface v√™m de outra fonte');
    } else if ((services?.length || 0) < 6) {
      console.log(
        `‚ö†Ô∏è  BANCO INCOMPLETO: ${services?.length || 0} servi√ßos encontrados, mas interface mostra 6`
      );
      console.log('üí° Poss√≠vel mistura de dados reais e mock');
    } else {
      console.log('‚úÖ BANCO COMPLETO: Todos os servi√ßos est√£o presentes');
    }

    console.log('\nüí° POSS√çVEIS CAUSAS DA DISCREP√ÇNCIA:');
    console.log('   1. Ambiente incorreto (produ√ß√£o vs homologa√ß√£o)');
    console.log('   2. Cache do navegador');
    console.log('   3. Dados mock no frontend');
    console.log('   4. API retornando dados de cache');
    console.log('   5. Problemas de sincroniza√ß√£o');

    console.log('\nüîß RECOMENDA√á√ïES:');
    console.log('   1. Verificar URL do ambiente no navegador');
    console.log('   2. Limpar cache completamente (Ctrl+Shift+R)');
    console.log('   3. Testar em modo inc√≥gnito');
    console.log('   4. Verificar se h√° dados mock no c√≥digo React');
    console.log('   5. Verificar logs da API no servidor');
  } catch (error) {
    console.error('üí• ERRO GERAL:', error);
  }
}

// Executar verifica√ß√£o
checkEnvironment().catch(console.error);
