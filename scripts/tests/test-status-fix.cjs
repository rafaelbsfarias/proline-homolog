/**
 * Script para simular e testar a corre√ß√£o do status do ve√≠culo
 * quando o cliente prop√µe uma nova data
 */

console.log('üîß === TESTE DE CORRE√á√ÉO DO STATUS ===');

// Estados antes e depois da corre√ß√£o
const ESTADOS = {
  ANTES: {
    vehicle_status: 'SOLICITA√á√ÉO DE MUDAN√áA DE DATA',
    vehicle_date: '2025-09-03',
    collection_date: '2025-09-17',
    problema: 'buildRescheduleGroups n√£o encontra ve√≠culos'
  },
  DEPOIS: {
    vehicle_status: 'APROVA√á√ÉO NOVA DATA',
    vehicle_date: '2025-09-17', 
    collection_date: '2025-09-17',
    solu√ß√£o: 'buildRescheduleGroups encontra ve√≠culos com status correto'
  }
};

function simulateBuildRescheduleGroups(vehicles) {
  console.log('\nüîç Simulando buildRescheduleGroups...');
  
  // Filtrar ve√≠culos com status 'APROVA√á√ÉO NOVA DATA'
  const filteredVehicles = vehicles.filter(v => v.status === 'APROVA√á√ÉO NOVA DATA');
  
  console.log(`Total de ve√≠culos: ${vehicles.length}`);
  console.log(`Ve√≠culos com status 'APROVA√á√ÉO NOVA DATA': ${filteredVehicles.length}`);
  
  if (filteredVehicles.length > 0) {
    console.log('‚úÖ buildRescheduleGroups encontrar√° ve√≠culos');
    console.log('‚úÖ Interface do admin mostrar√° bot√µes Aceitar/Rejeitar');
    return filteredVehicles.map(v => ({
      addressId: v.addressId,
      address: v.address,
      vehicle_count: 1,
      collection_fee: 8.99,
      collection_date: v.estimated_arrival_date,
      proposed_by: 'client'
    }));
  } else {
    console.log('‚ùå buildRescheduleGroups N√ÉO encontrar√° ve√≠culos');
    console.log('‚ùå Interface do admin N√ÉO mostrar√° bot√µes Aceitar/Rejeitar');
    return [];
  }
}

console.log('\nüìä ESTADO ANTES DA CORRE√á√ÉO:');
console.log(JSON.stringify(ESTADOS.ANTES, null, 2));

const vehicleAntes = [{
  id: 'f87aa8b6-932a-4f7b-8b2c-b687f15386a7',
  status: ESTADOS.ANTES.vehicle_status,
  estimated_arrival_date: ESTADOS.ANTES.vehicle_date,
  addressId: 'f6ed37bc-1267-4c7a-8be5-7d7b44230647',
  address: 'general labatut, 123 - salvador'
}];

const resultAntes = simulateBuildRescheduleGroups(vehicleAntes);
console.log('Resultado:', resultAntes);

console.log('\nüìä ESTADO DEPOIS DA CORRE√á√ÉO:');
console.log(JSON.stringify(ESTADOS.DEPOIS, null, 2));

const vehicleDepois = [{
  id: 'f87aa8b6-932a-4f7b-8b2c-b687f15386a7',
  status: ESTADOS.DEPOIS.vehicle_status,
  estimated_arrival_date: ESTADOS.DEPOIS.vehicle_date,
  addressId: 'f6ed37bc-1267-4c7a-8be5-7d7b44230647',
  address: 'general labatut, 123 - salvador'
}];

const resultDepois = simulateBuildRescheduleGroups(vehicleDepois);
console.log('Resultado:', resultDepois);

console.log('\nüéØ === RESUMO DA CORRE√á√ÉO ===');
console.log(`Antes: ${resultAntes.length} groups encontrados (problema)`);
console.log(`Depois: ${resultDepois.length} groups encontrados (corrigido)`);

if (resultDepois.length > 0) {
  console.log('\nüéâ CORRE√á√ÉO FUNCIONOU!');
  console.log('‚úÖ API collection-reschedule agora define status APROVA√á√ÉO NOVA DATA');
  console.log('‚úÖ buildRescheduleGroups encontra ve√≠culos com status correto');
  console.log('‚úÖ Interface do admin mostra bot√µes Aceitar/Rejeitar');
  console.log('‚úÖ Admin consegue aceitar/rejeitar propostas do cliente');
} else {
  console.log('\n‚ùå CORRE√á√ÉO PRECISA DE AJUSTES');
}

console.log('\nüîß PR√ìXIMOS PASSOS:');
console.log('1. Testar no navegador: cliente prop√µe nova data');
console.log('2. Verificar se aparece na interface do admin');
console.log('3. Verificar se bot√µes Aceitar/Rejeitar funcionam');
console.log('4. Confirmar sincroniza√ß√£o de dados');
