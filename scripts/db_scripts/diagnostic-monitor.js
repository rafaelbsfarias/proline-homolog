// scripts/db_scripts/diagnostic-monitor.js

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';

// Resolve __dirname para m√≥dulos ES
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Carrega vari√°veis de ambiente
dotenv.config({ path: path.resolve(__dirname, '../../.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceRoleKey =
  process.env.NEXT_SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceRoleKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);

// =============================================================================
// MONITOR DE BANCO DE DADOS - DIAGN√ìSTICO DE FLUXO DE COLETAS
// =============================================================================

class DatabaseMonitor {
  constructor() {
    this.snapshots = [];
    this.logFile = path.resolve(__dirname, 'diagnostic-log.json');
  }

  // =============================================================================
  // CAPTURA DE SNAPSHOTS
  // =============================================================================

  async captureSnapshot(label = 'snapshot') {
    console.log(`\nüì∏ CAPTURANDO SNAPSHOT: ${label}`);

    const timestamp = new Date().toISOString();
    const snapshot = {
      timestamp,
      label,
      data: {},
    };

    try {
      // 1. Capturar estado dos ve√≠culos do cliente
      console.log('  üìä Capturando ve√≠culos...');
      const { data: vehicles, error: vehError } = await supabase
        .from('vehicles')
        .select('*')
        .eq('client_id', '00ab894a-1120-4dbe-abb0-c1a6d64b516a') // ID do cliente de teste
        .order('created_at', { ascending: false });

      if (vehError) throw vehError;

      // 2. Capturar coletas ativas
      console.log('  üì¶ Capturando coletas ativas...');
      const { data: collections, error: collError } = await supabase
        .from('vehicle_collections')
        .select('*')
        .eq('client_id', '00ab894a-1120-4dbe-abb0-c1a6d64b516a')
        .order('created_at', { ascending: false });

      if (collError) throw collError;

      // 3. Capturar hist√≥rico de coletas
      console.log('  üìö Capturando hist√≥rico...');
      const { data: history, error: histError } = await supabase
        .from('collection_history')
        .select('*')
        .eq('client_id', '00ab894a-1120-4dbe-abb0-c1a6d64b516a')
        .order('created_at', { ascending: false });

      if (histError) throw histError;

      // 4. Capturar endere√ßos do cliente
      console.log('  üìç Capturando endere√ßos...');
      const { data: addresses, error: addrError } = await supabase
        .from('addresses')
        .select('*')
        .eq('profile_id', '00ab894a-1120-4dbe-abb0-c1a6d64b516a')
        .order('created_at', { ascending: false });

      if (addrError) throw addrError;

      snapshot.data = {
        vehicles: vehicles || [],
        collections: collections || [],
        history: history || [],
        addresses: addresses || [],
      };

      this.snapshots.push(snapshot);

      console.log(`‚úÖ Snapshot "${label}" capturado com sucesso`);
      console.log(`   üìä Ve√≠culos: ${vehicles?.length || 0}`);
      console.log(`   üì¶ Coletas: ${collections?.length || 0}`);
      console.log(`   üìö Hist√≥rico: ${history?.length || 0}`);
      console.log(`   üìç Endere√ßos: ${addresses?.length || 0}`);

      return snapshot;
    } catch (error) {
      console.error(`‚ùå Erro ao capturar snapshot "${label}":`, error);
      throw error;
    }
  }

  // =============================================================================
  // COMPARA√á√ÉO DE SNAPSHOTS
  // =============================================================================

  compareSnapshots(snapshot1, snapshot2, description = 'Compara√ß√£o') {
    console.log(`\nüîç ${description}`);
    console.log('='.repeat(60));

    const changes = {
      vehicles: this.compareArrays(
        snapshot1.data.vehicles,
        snapshot2.data.vehicles,
        'id',
        'vehicles'
      ),
      collections: this.compareArrays(
        snapshot1.data.collections,
        snapshot2.data.collections,
        'id',
        'collections'
      ),
      history: this.compareArrays(snapshot1.data.history, snapshot2.data.history, 'id', 'history'),
      addresses: this.compareArrays(
        snapshot1.data.addresses,
        snapshot2.data.addresses,
        'id',
        'addresses'
      ),
    };

    // Resumo das mudan√ßas
    console.log('\nüìä RESUMO DAS MUDAN√áAS:');
    Object.entries(changes).forEach(([table, change]) => {
      if (change.added.length > 0 || change.removed.length > 0 || change.modified.length > 0) {
        console.log(`   ${table}:`);
        if (change.added.length > 0) console.log(`     ‚ûï Adicionados: ${change.added.length}`);
        if (change.removed.length > 0) console.log(`     ‚ûñ Removidos: ${change.removed.length}`);
        if (change.modified.length > 0)
          console.log(`     üîÑ Modificados: ${change.modified.length}`);
      }
    });

    return changes;
  }

  compareArrays(arr1, arr2, keyField, tableName) {
    const map1 = new Map(arr1.map(item => [item[keyField], item]));
    const map2 = new Map(arr2.map(item => [item[keyField], item]));

    const added = [];
    const removed = [];
    const modified = [];

    // Itens adicionados (est√£o em arr2 mas n√£o em arr1)
    arr2.forEach(item => {
      if (!map1.has(item[keyField])) {
        added.push(item);
      }
    });

    // Itens removidos (est√£o em arr1 mas n√£o em arr2)
    arr1.forEach(item => {
      if (!map2.has(item[keyField])) {
        removed.push(item);
      }
    });

    // Itens modificados (est√£o em ambos mas com diferen√ßas)
    arr1.forEach(item1 => {
      const item2 = map2.get(item1[keyField]);
      if (item2) {
        const differences = this.findDifferences(item1, item2);
        if (differences.length > 0) {
          modified.push({
            id: item1[keyField],
            before: item1,
            after: item2,
            changes: differences,
          });
        }
      }
    });

    // Log detalhado das mudan√ßas
    if (added.length > 0) {
      console.log(`\n‚ûï ${tableName.toUpperCase()} ADICIONADOS:`);
      added.forEach(item => console.log(`   ID: ${item[keyField]} - ${JSON.stringify(item)}`));
    }

    if (removed.length > 0) {
      console.log(`\n‚ûñ ${tableName.toUpperCase()} REMOVIDOS:`);
      removed.forEach(item => console.log(`   ID: ${item[keyField]} - ${JSON.stringify(item)}`));
    }

    if (modified.length > 0) {
      console.log(`\nüîÑ ${tableName.toUpperCase()} MODIFICADOS:`);
      modified.forEach(change => {
        console.log(`   ID: ${change.id}`);
        change.changes.forEach(diff => {
          console.log(`     ${diff.field}: ${diff.before} ‚Üí ${diff.after}`);
        });
      });
    }

    return { added, removed, modified };
  }

  findDifferences(obj1, obj2) {
    const differences = [];
    const allKeys = new Set([...Object.keys(obj1), ...Object.keys(obj2)]);

    allKeys.forEach(key => {
      const val1 = obj1[key];
      const val2 = obj2[key];

      if (JSON.stringify(val1) !== JSON.stringify(val2)) {
        differences.push({
          field: key,
          before: val1,
          after: val2,
        });
      }
    });

    return differences;
  }

  // =============================================================================
  // PERSIST√äNCIA DE LOGS
  // =============================================================================

  saveLog() {
    try {
      const logData = {
        session: new Date().toISOString(),
        snapshots: this.snapshots,
        comparisons: [],
      };

      fs.writeFileSync(this.logFile, JSON.stringify(logData, null, 2));
      console.log(`\nüíæ Log salvo em: ${this.logFile}`);
    } catch (error) {
      console.error('‚ùå Erro ao salvar log:', error);
    }
  }

  loadLog() {
    try {
      if (fs.existsSync(this.logFile)) {
        const data = JSON.parse(fs.readFileSync(this.logFile, 'utf8'));
        this.snapshots = data.snapshots || [];
        console.log(`üìñ Log carregado: ${this.snapshots.length} snapshots`);
        return data;
      }
    } catch (error) {
      console.error('‚ùå Erro ao carregar log:', error);
    }
    return null;
  }

  // =============================================================================
  // UTILIT√ÅRIOS
  // =============================================================================

  clearSnapshots() {
    this.snapshots = [];
    console.log('üßπ Snapshots limpos');
  }

  getLatestSnapshot() {
    return this.snapshots[this.snapshots.length - 1];
  }

  getSnapshotByLabel(label) {
    return this.snapshots.find(s => s.label === label);
  }
}

// =============================================================================
// FUN√á√ïES DE DIAGN√ìSTICO ESPEC√çFICAS
// =============================================================================

async function diagnoseCollectionFlow() {
  const monitor = new DatabaseMonitor();

  console.log('üî¨ INICIANDO DIAGN√ìSTICO DE FLUXO DE COLETAS');
  console.log('='.repeat(60));

  try {
    // Carregar log anterior se existir
    monitor.loadLog();

    // Capturar estado inicial
    await monitor.captureSnapshot('ESTADO_INICIAL');

    console.log('\n‚úÖ Diagn√≥stico conclu√≠do. Use os snapshots para an√°lise.');
    console.log('üí° Execute as a√ß√µes do fluxo e capture novos snapshots para compara√ß√£o.');
  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico:', error);
  } finally {
    monitor.saveLog();
  }
}

// =============================================================================
// EXECU√á√ÉO PRINCIPAL
// =============================================================================

if (import.meta.url === `file://${process.argv[1]}`) {
  diagnoseCollectionFlow();
}

export { DatabaseMonitor, diagnoseCollectionFlow };
