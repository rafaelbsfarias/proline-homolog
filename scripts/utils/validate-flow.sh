#!/bin/bash

echo "=== Valida√ß√£o do Fluxo: An√°lise Finalizada ‚Üí Or√ßamento para Parceiro ==="
echo "Testando endpoints sem modificar o estado do banco de dados"
echo ""

# Configura√ß√µes
BASE_URL="http://localhost:3000"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç VERIFICANDO ENDPOINTS DISPON√çVEIS${NC}"
echo "========================================"

# Testar endpoints que n√£o requerem autentica√ß√£o
echo -e "${YELLOW}Testando endpoints p√∫blicos...${NC}"

# 1. Teste do endpoint simples
echo -n "  /api/test-simple-endpoint: "
RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" "${BASE_URL}/api/test-simple-endpoint")
HTTP_CODE=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS:.*//g')

if [ "$HTTP_CODE" = "200" ] && echo "$BODY" | grep -q "success"; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå FALHA (HTTP $HTTP_CODE)${NC}"
fi

# 2. Teste do endpoint de contagem de usu√°rios
echo -n "  /api/users-count: "
RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" "${BASE_URL}/api/users-count")
HTTP_CODE=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS:.*//g')

if [ "$HTTP_CODE" = "200" ] && echo "$BODY" | grep -q "count"; then
    USER_COUNT=$(echo "$BODY" | grep -o '"count":[0-9]*' | cut -d':' -f2)
    echo -e "${GREEN}‚úÖ OK (${USER_COUNT} usu√°rios)${NC}"
else
    echo -e "${RED}‚ùå FALHA (HTTP $HTTP_CODE)${NC}"
fi

echo ""
echo -e "${BLUE}üìã ENDPOINTS QUE REQUEREM AUTENTICA√á√ÉO${NC}"
echo "=========================================="

echo -e "${YELLOW}Estes endpoints requerem tokens JWT v√°lidos:${NC}"
echo ""

echo -e "${PURPLE}Endpoints de Cliente:${NC}"
echo "  GET  /api/client/vehicles"
echo "  GET  /api/client/vehicle-inspection?vehicleId=<id>"
echo "  GET  /api/client/vehicles-count"
echo ""

echo -e "${PURPLE}Endpoints de Especialista:${NC}"
echo "  POST /api/specialist/start-analysis?vehicleId=<id>"
echo "  GET  /api/specialist/get-checklist?vehicleId=<id>"
echo "  POST /api/specialist/save-checklist?vehicleId=<id>"
echo "  POST /api/specialist/finalize-checklist?vehicleId=<id>"
echo ""

echo -e "${PURPLE}Endpoints de Parceiro:${NC}"
echo "  GET  /api/partner/dashboard"
echo "  GET  /api/partner/services"
echo ""

echo -e "${BLUE}üîÑ FLUXO ESPERADO DE VALIDA√á√ÉO MANUAL${NC}"
echo "=========================================="

echo -e "${YELLOW}Para validar se o parceiro de mec√¢nica recebe or√ßamentos quando an√°lises s√£o finalizadas:${NC}"
echo ""

echo -e "${GREEN}PASSO 1: Verificar Parceiro de Mec√¢nica${NC}"
echo "  ‚Ä¢ Fa√ßa login como parceiro no sistema"
echo "  ‚Ä¢ Acesse /api/partner/dashboard"
echo "  ‚Ä¢ Verifique se o parceiro tem categoria 'mechanics' associada"
echo "  ‚Ä¢ Anote o ID do parceiro"
echo ""

echo -e "${GREEN}PASSO 2: Verificar Ve√≠culos com An√°lises${NC}"
echo "  ‚Ä¢ Fa√ßa login como cliente no sistema"
echo "  ‚Ä¢ Acesse /api/client/vehicles"
echo "  ‚Ä¢ Identifique ve√≠culos que precisam de an√°lise"
echo "  ‚Ä¢ Anote o ID de um ve√≠culo"
echo ""

echo -e "${GREEN}PASSO 3: Simular An√°lise como Especialista${NC}"
echo "  ‚Ä¢ Fa√ßa login como especialista no sistema"
echo "  ‚Ä¢ Use POST /api/specialist/start-analysis?vehicleId=<VEHICLE_ID>"
echo "  ‚Ä¢ Use POST /api/specialist/finalize-checklist?vehicleId=<VEHICLE_ID>"
echo ""

echo -e "${GREEN}PASSO 4: Verificar se Or√ßamento foi Criado${NC}"
echo "  ‚Ä¢ Fa√ßa login novamente como parceiro"
echo "  ‚Ä¢ Acesse /api/partner/dashboard"
echo "  ‚Ä¢ Verifique se apareceu um novo or√ßamento na se√ß√£o 'budget_counters'"
echo "  ‚Ä¢ Confirme que o or√ßamento est√° relacionado √† categoria 'mechanics'"
echo ""

echo -e "${BLUE}‚úÖ VALIDA√á√ÉO DO SUCESSO${NC}"
echo "=========================="

echo -e "${GREEN}O fluxo est√° funcionando corretamente se:${NC}"
echo "  ‚úÖ Especialista consegue finalizar an√°lise (sem erros)"
echo "  ‚úÖ Parceiro v√™ novo or√ßamento no dashboard ap√≥s finaliza√ß√£o"
echo "  ‚úÖ Or√ßamento criado tem categoria 'mechanics'"
echo "  ‚úÖ Contadores de or√ßamento s√£o atualizados corretamente"
echo ""

echo -e "${BLUE}üõ†Ô∏è  FERRAMENTAS DE DEBUG${NC}"
echo "==========================="

echo -e "${YELLOW}Para debugar o fluxo, verifique:${NC}"
echo "  ‚Ä¢ Logs do servidor Next.js"
echo "  ‚Ä¢ Tabelas: inspections, inspection_services, service_orders, quotes"
echo "  ‚Ä¢ Relacionamentos: source_inspection_id, partner_id, category_id"
echo ""

echo -e "${GREEN}‚úÖ Script de valida√ß√£o criado com sucesso!${NC}"
echo ""
echo "Este script n√£o modifica o banco de dados, apenas testa endpoints e fornece"
echo "instru√ß√µes para valida√ß√£o manual do fluxo de an√°lise ‚Üí or√ßamento."
