#!/bin/bash

echo "=== Populando Relacionamentos Parceiro-Categoria ==="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Erro: Execute este script do diret√≥rio raiz do projeto${NC}"
    exit 1
fi

echo -e "${BLUE}üîç Verificando parceiros existentes...${NC}"

# Executar script Node.js para popular os relacionamentos
node -e "
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function populatePartnerCategories() {
  try {
    console.log('üîç Buscando parceiros...');

    // Buscar todos os parceiros
    const { data: partners, error: partnersError } = await supabase
      .from('partners')
      .select('profile_id, company_name');

    if (partnersError) {
      console.error('‚ùå Erro ao buscar parceiros:', partnersError);
      return;
    }

    console.log(\`üìã Encontrados \${partners.length} parceiros\`);

    // Buscar todas as categorias
    const { data: categories, error: categoriesError } = await supabase
      .from('service_categories')
      .select('id, key, name');

    if (categoriesError) {
      console.error('‚ùå Erro ao buscar categorias:', categoriesError);
      return;
    }

    console.log(\`üìã Encontradas \${categories.length} categorias:\`);
    categories.forEach(cat => console.log(\`   - \${cat.key}: \${cat.name}\`));

    // Para cada parceiro, associar a categoria 'mechanics' (mais comum)
    const mechanicsCategory = categories.find(cat => cat.key === 'mechanics');

    if (!mechanicsCategory) {
      console.error('‚ùå Categoria mechanics n√£o encontrada');
      return;
    }

    console.log('');
    console.log('üîß Associando parceiros √† categoria mechanics...');

    const associations = [];
    for (const partner of partners) {
      // Verificar se j√° existe associa√ß√£o
      const { data: existing } = await supabase
        .from('partners_service_categories')
        .select('id')
        .eq('partner_id', partner.profile_id)
        .eq('category_id', mechanicsCategory.id)
        .single();

      if (!existing) {
        associations.push({
          partner_id: partner.profile_id,
          category_id: mechanicsCategory.id,
          priority: 1,
          created_at: new Date().toISOString()
        });
        console.log(\`   ‚úÖ \${partner.company_name} ser√° associado a mechanics\`);
      } else {
        console.log(\`   ‚ö†Ô∏è  \${partner.company_name} j√° est√° associado a mechanics\`);
      }
    }

    if (associations.length > 0) {
      const { error: insertError } = await supabase
        .from('partners_service_categories')
        .insert(associations);

      if (insertError) {
        console.error('‚ùå Erro ao inserir associa√ß√µes:', insertError);
      } else {
        console.log(\`‚úÖ Inseridas \${associations.length} associa√ß√µes parceiro-categoria\`);
      }
    } else {
      console.log('‚ÑπÔ∏è  Nenhuma nova associa√ß√£o necess√°ria');
    }

    // Verificar resultado final
    const { data: finalAssociations, error: finalError } = await supabase
      .from('partners_service_categories')
      .select(\`
        partner_id,
        partners!inner(company_name),
        service_categories!inner(key, name)
      \`);

    if (!finalError && finalAssociations) {
      console.log('');
      console.log('üìä Associa√ß√µes atuais:');
      finalAssociations.forEach(assoc => {
        console.log(\`   - \${assoc.partners.company_name} ‚Üí \${assoc.service_categories.name} (\${assoc.service_categories.key})\`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
  }
}

populatePartnerCategories();
"
