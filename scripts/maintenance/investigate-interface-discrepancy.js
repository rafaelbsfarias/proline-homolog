/**
 * Script para Investigar Discrep√¢ncia entre Interface e Banco
 * Verifica por que a interface mostra 6 servi√ßos mas o banco tem apenas 3
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function investigateInterfaceDiscrepancy() {
  console.log('üîç INVESTIGANDO DISCREP√ÇNCIA: INTERFACE vs BANCO DE DADOS');
  console.log('='.repeat(70));

  console.log('\nüìä DADOS DA INTERFACE (6 servi√ßos):');
  console.log('1. Lavagem Completa - R$ 85,00 - Lavagem');
  console.log('2. Polimento de Far√≥is - R$ 45,00 - Polimento');
  console.log('3. Higieniza√ß√£o de Ar-Condicionado - R$ 120,00 - Higieniza√ß√£o');
  console.log('4. Lavagem de Motor - R$ 65,00 - Lavagem');
  console.log('5. Aplica√ß√£o de Cera - R$ 35,00 - Polimento');
  console.log('6. Limpeza de Estofados - R$ 95,00 - null');

  try {
    console.log('\nüìã VERIFICANDO TODOS OS SERVI√áOS NO BANCO...');
    const { data: allServices, error: allError } = await supabase
      .from('partner_services')
      .select('*');

    if (allError) {
      console.error('‚ùå Erro ao buscar todos os servi√ßos:', allError);
      return;
    }

    console.log(`üìä Total de servi√ßos no banco: ${allServices?.length || 0}`);

    if (allServices && allServices.length > 0) {
      console.log('\nüèÜ TODOS OS SERVI√áOS NO BANCO:');
      allServices.forEach((service, index) => {
        console.log(`   ${index + 1}. ${service.name}`);
        console.log(`      Pre√ßo: R$ ${service.price}`);
        console.log(`      Categoria: ${service.category || 'null'}`);
        console.log(`      Parceiro ID: ${service.partner_id}`);
        console.log(`      ID: ${service.id}`);
        console.log('');
      });
    }

    console.log('\nüîç VERIFICANDO SE OS SERVI√áOS DA INTERFACE EXISTEM NO BANCO...');

    const interfaceServices = [
      { name: 'Lavagem Completa', price: 85.0, category: 'Lavagem' },
      { name: 'Polimento de Far√≥is', price: 45.0, category: 'Polimento' },
      { name: 'Higieniza√ß√£o de Ar-Condicionado', price: 120.0, category: 'Higieniza√ß√£o' },
      { name: 'Lavagem de Motor', price: 65.0, category: 'Lavagem' },
      { name: 'Aplica√ß√£o de Cera', price: 35.0, category: 'Polimento' },
      { name: 'Limpeza de Estofados', price: 95.0, category: null },
    ];

    let foundCount = 0;
    const notFoundServices = [];

    for (const interfaceService of interfaceServices) {
      const found = allServices?.find(
        service =>
          service.name === interfaceService.name &&
          service.price === interfaceService.price &&
          service.category === interfaceService.category
      );

      if (found) {
        foundCount++;
        console.log(`‚úÖ ENCONTRADO: ${interfaceService.name}`);
      } else {
        notFoundServices.push(interfaceService);
        console.log(`‚ùå N√ÉO ENCONTRADO: ${interfaceService.name}`);
      }
    }

    console.log(`\nüìä RESULTADO DA VERIFICA√á√ÉO:`);
    console.log(`   Servi√ßos da interface encontrados no banco: ${foundCount}/6`);
    console.log(`   Servi√ßos n√£o encontrados: ${notFoundServices.length}`);

    console.log('\nüë• VERIFICANDO USU√ÅRIOS E PARCEIROS...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, role, full_name');

    if (profilesError) {
      console.error('‚ùå Erro ao buscar perfis:', profilesError);
    } else {
      console.log(`üìä Total de perfis: ${profiles?.length || 0}`);
      const partners = profiles?.filter(p => p.role === 'partner') || [];
      console.log(`üéØ Usu√°rios com role 'partner': ${partners.length}`);

      if (partners.length > 0) {
        console.log('\nüè¢ PARCEIROS ENCONTRADOS:');
        partners.forEach((partner, index) => {
          console.log(`   ${index + 1}. ${partner.full_name || 'N/A'} (ID: ${partner.id})`);
        });
      }
    }

    console.log('\nüîç VERIFICANDO POSS√çVEIS FONTES DE DADOS...');

    console.log('‚ÑπÔ∏è  Verificando se h√° dados hardcoded no c√≥digo...');

    console.log('‚ÑπÔ∏è  Poss√≠vel cache do navegador ou localStorage');

    console.log('\nüéØ DIAGN√ìSTICO FINAL:');
    console.log('='.repeat(50));

    if (foundCount === 0) {
      console.log('‚ùå NENHUM servi√ßo da interface foi encontrado no banco');
      console.log('üí° POSS√çVEIS CAUSAS:');
      console.log('   1. Dados hardcoded no frontend');
      console.log('   2. Cache do navegador');
      console.log('   3. API retornando dados mock');
      console.log('   4. Problema de ambiente (produ√ß√£o vs homologa√ß√£o)');
    } else if (foundCount < 6) {
      console.log(`‚ö†Ô∏è  Apenas ${foundCount} dos 6 servi√ßos foram encontrados no banco`);
      console.log('üí° POSS√çVEIS CAUSAS:');
      console.log('   1. Mistura de dados reais e mock');
      console.log('   2. Problemas de sincroniza√ß√£o');
      console.log('   3. Dados de diferentes ambientes');
    } else {
      console.log('‚úÖ Todos os servi√ßos foram encontrados no banco');
      console.log('üí° POSS√çVEIS CAUSAS:');
      console.log('   1. Problemas de cache');
      console.log('   2. Quest√µes de permiss√µes RLS');
    }

    console.log('\nüí° RECOMENDA√á√ïES:');
    console.log('   1. Limpar cache do navegador (Ctrl+F5)');
    console.log('   2. Verificar se est√° no ambiente correto');
    console.log('   3. Verificar logs da API');
    console.log('   4. Testar em modo inc√≥gnito');
    console.log('   5. Verificar se h√° dados mock no c√≥digo');
  } catch (error) {
    console.error('üí• ERRO GERAL:', error);
  }
}

investigateInterfaceDiscrepancy().catch(console.error);
