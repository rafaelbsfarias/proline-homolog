/**
 * Script de Investiga√ß√£o Espec√≠fica: Servi√ßos de Parceiro n√£o Aparecem no Or√ßamento
 * Verifica todas as poss√≠veis causas da inconsist√™ncia identificada
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { writeFileSync } from 'fs';
import { join } from 'path';

dotenv.config({ path: '.env.local' });

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

console.log(`üîó Conectando ao banco: ${SUPABASE_URL}`);
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

class PartnerServicesInvestigator {
  constructor() {
    this.report = {
      timestamp: new Date().toISOString(),
      investigation: {},
      findings: [],
      recommendations: [],
    };
  }

  async investigate() {
    console.log('üîç INICIANDO INVESTIGA√á√ÉO: SERVI√áOS DE PARCEIRO NO OR√áAMENTO');
    console.log('='.repeat(80));

    try {
      await this.checkPartnerUser();
      await this.checkPartnerServicesTable();
      await this.checkPartnerServicesData();
      await this.checkAPIEndpoint();
      await this.checkAuthenticationFlow();
      await this.simulateAPICall();
      await this.generateInvestigationReport();

      console.log('\n‚úÖ INVESTIGA√á√ÉO CONCLU√çDA!');
      console.log('üìÑ Relat√≥rio salvo em: reports/partner-services-investigation.json');
    } catch (error) {
      console.error('üí• ERRO NA INVESTIGA√á√ÉO:', error);
      this.report.findings.push(`Erro cr√≠tico: ${error.message}`);
    }
  }

  async checkPartnerUser() {
    console.log('\nüë§ VERIFICANDO USU√ÅRIO PARCEIRO');
    console.log('-'.repeat(50));

    // Procurar pelo usu√°rio mencionado (mecanica@parceiro.com)
    const { data: user, error } = await supabase.auth.admin.listUsers();

    if (error) {
      console.log(`‚ùå Erro ao listar usu√°rios: ${error.message}`);
      this.report.findings.push(`Erro ao acessar usu√°rios: ${error.message}`);
      return;
    }

    const partnerUser = user.users.find(u => u.email === 'mecanica@parceiro.com');

    if (!partnerUser) {
      console.log('‚ùå Usu√°rio "mecanica@parceiro.com" n√£o encontrado');
      this.report.findings.push('Usu√°rio parceiro n√£o encontrado no sistema');
      return;
    }

    console.log(`‚úÖ Usu√°rio encontrado: ${partnerUser.email}`);
    console.log(`   ID: ${partnerUser.id}`);
    console.log(`   Criado em: ${partnerUser.created_at}`);

    // Verificar perfil do usu√°rio
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', partnerUser.id)
      .single();

    if (profileError) {
      console.log(`‚ùå Erro ao buscar perfil: ${profileError.message}`);
      this.report.findings.push(`Erro ao buscar perfil do usu√°rio: ${profileError.message}`);
    } else if (profile) {
      console.log(`‚úÖ Perfil encontrado:`);
      console.log(`   Role: ${profile.role}`);
      console.log(`   Empresa: ${profile.company_name || 'N/A'}`);
      console.log(`   Status: ${profile.status || 'N/A'}`);

      if (profile.role !== 'partner') {
        console.log(`‚ö†Ô∏è  PROBLEMA: Role do usu√°rio √© "${profile.role}", deveria ser "partner"`);
        this.report.findings.push(`Role incorreta: ${profile.role} (deveria ser "partner")`);
      } else {
        console.log('‚úÖ Role do usu√°rio est√° correta');
      }
    } else {
      console.log('‚ùå Perfil n√£o encontrado');
      this.report.findings.push('Perfil do usu√°rio n√£o encontrado');
    }

    this.report.investigation.user = {
      id: partnerUser.id,
      email: partnerUser.email,
      profile: profile || null,
    };
  }

  async checkPartnerServicesTable() {
    console.log('\nüìã VERIFICANDO TABELA PARTNER_SERVICES');
    console.log('-'.repeat(50));

    try {
      // Verificar estrutura da tabela
      const { data: sample, error: sampleError } = await supabase
        .from('partner_services')
        .select('*')
        .limit(1);

      if (sampleError) {
        console.log(`‚ùå Erro ao acessar tabela: ${sampleError.message}`);
        this.report.findings.push(`Erro na tabela partner_services: ${sampleError.message}`);
        return;
      }

      if (sample && sample.length > 0) {
        console.log('‚úÖ Tabela acess√≠vel');
        console.log(`   Colunas: ${Object.keys(sample[0]).join(', ')}`);
      } else {
        console.log('‚ö†Ô∏è  Tabela existe mas est√° vazia');
        this.report.findings.push('Tabela partner_services est√° vazia');
      }

      // Contar total de servi√ßos
      const { count, error: countError } = await supabase
        .from('partner_services')
        .select('*', { count: 'exact', head: true });

      if (countError) {
        console.log(`‚ùå Erro ao contar servi√ßos: ${countError.message}`);
      } else {
        console.log(`üìä Total de servi√ßos na tabela: ${count}`);
      }

      this.report.investigation.tableStructure = {
        accessible: !sampleError,
        columns: sample && sample.length > 0 ? Object.keys(sample[0]) : [],
        totalServices: count || 0,
      };
    } catch (error) {
      console.log(`‚ùå Erro geral na tabela: ${error.message}`);
      this.report.findings.push(`Erro geral na tabela partner_services: ${error.message}`);
    }
  }

  async checkPartnerServicesData() {
    console.log('\nüîç VERIFICANDO DADOS DOS SERVI√áOS DO PARCEIRO');
    console.log('-'.repeat(50));

    if (!this.report.investigation.user?.id) {
      console.log('‚ùå N√£o foi poss√≠vel verificar dados - usu√°rio n√£o encontrado');
      return;
    }

    const partnerId = this.report.investigation.user.id;

    try {
      // Buscar servi√ßos do parceiro espec√≠fico
      const { data: services, error } = await supabase
        .from('partner_services')
        .select('*')
        .eq('partner_id', partnerId);

      if (error) {
        console.log(`‚ùå Erro ao buscar servi√ßos: ${error.message}`);
        this.report.findings.push(`Erro ao buscar servi√ßos do parceiro: ${error.message}`);
        return;
      }

      console.log(`üìä Servi√ßos encontrados para o parceiro: ${services?.length || 0}`);

      if (services && services.length > 0) {
        console.log('\nüèÜ SERVI√áOS DO PARCEIRO:');
        services.forEach((service, index) => {
          console.log(`   ${index + 1}. ${service.name}`);
          console.log(`      Pre√ßo: R$ ${service.price}`);
          console.log(`      Categoria: ${service.category}`);
          console.log(`      Descri√ß√£o: ${service.description || 'N/A'}`);
          console.log(`      ID: ${service.id}`);
          console.log('');
        });

        // Verificar se os servi√ßos t√™m todos os campos necess√°rios
        const incompleteServices = services.filter(s => !s.name || !s.price || !s.category);
        if (incompleteServices.length > 0) {
          console.log(`‚ö†Ô∏è  Servi√ßos incompletos encontrados: ${incompleteServices.length}`);
          this.report.findings.push(`${incompleteServices.length} servi√ßos com dados incompletos`);
        }
      } else {
        console.log('‚ùå NENHUM SERVI√áO ENCONTRADO PARA ESTE PARCEIRO');
        this.report.findings.push('Parceiro n√£o possui servi√ßos cadastrados');
      }

      this.report.investigation.partnerServices = {
        count: services?.length || 0,
        services: services || [],
        incompleteCount: services?.filter(s => !s.name || !s.price || !s.category).length || 0,
      };
    } catch (error) {
      console.log(`‚ùå Erro ao verificar dados: ${error.message}`);
      this.report.findings.push(`Erro ao verificar dados dos servi√ßos: ${error.message}`);
    }
  }

  async checkAPIEndpoint() {
    console.log('\nüåê VERIFICANDO ENDPOINT DA API');
    console.log('-'.repeat(50));

    // Verificar se o endpoint existe e est√° acess√≠vel
    console.log('‚ÑπÔ∏è  Endpoint esperado: /api/partner/list-services');
    console.log('‚ÑπÔ∏è  M√©todo: GET');
    console.log('‚ÑπÔ∏è  Autentica√ß√£o: Bearer token required');

    // Verificar se existem outras rotas relacionadas
    const possibleEndpoints = [
      '/api/partner/list-services',
      '/api/partner/services',
      '/api/services',
    ];

    console.log('\nüîç Endpoints relacionados encontrados no projeto:');
    possibleEndpoints.forEach(endpoint => {
      console.log(`   ${endpoint}`);
    });

    this.report.investigation.apiEndpoint = {
      expectedEndpoint: '/api/partner/list-services',
      method: 'GET',
      authRequired: true,
      possibleEndpoints,
    };
  }

  async checkAuthenticationFlow() {
    console.log('\nüîê VERIFICANDO FLUXO DE AUTENTICA√á√ÉO');
    console.log('-'.repeat(50));

    if (!this.report.investigation.user?.id) {
      console.log('‚ùå N√£o foi poss√≠vel verificar autentica√ß√£o - usu√°rio n√£o encontrado');
      return;
    }

    console.log('‚ÑπÔ∏è  Verificando middleware de autentica√ß√£o...');
    console.log('   Middleware esperado: withPartnerAuth');
    console.log('   Verifica√ß√µes esperadas:');
    console.log('   - Token JWT v√°lido');
    console.log('   - Role do usu√°rio = "partner"');
    console.log('   - Sess√£o ativa');

    // Simular verifica√ß√£o de sess√£o
    const { data: session, error: sessionError } = await supabase.auth.admin.getUserById(
      this.report.investigation.user.id
    );

    if (sessionError) {
      console.log(`‚ùå Erro ao verificar sess√£o: ${sessionError.message}`);
      this.report.findings.push(`Erro na verifica√ß√£o de sess√£o: ${sessionError.message}`);
    } else {
      console.log('‚úÖ Sess√£o do usu√°rio pode ser verificada');
    }

    this.report.investigation.authentication = {
      middleware: 'withPartnerAuth',
      checks: ['JWT token', 'user role', 'active session'],
      sessionValid: !sessionError,
    };
  }

  async simulateAPICall() {
    console.log('\nüîÑ SIMULANDO CHAMADA DA API');
    console.log('-'.repeat(50));

    if (!this.report.investigation.user?.id) {
      console.log('‚ùå N√£o foi poss√≠vel simular API - usu√°rio n√£o encontrado');
      return;
    }

    console.log('‚ÑπÔ∏è  Simulando chamada para /api/partner/list-services...');

    try {
      // Simular a query que a API faria
      const { data: services, error } = await supabase
        .from('partner_services')
        .select('*')
        .eq('partner_id', this.report.investigation.user.id);

      if (error) {
        console.log(`‚ùå Erro na simula√ß√£o: ${error.message}`);
        this.report.findings.push(`Erro na simula√ß√£o da API: ${error.message}`);
      } else {
        console.log(`‚úÖ Simula√ß√£o bem-sucedida: ${services?.length || 0} servi√ßos retornados`);

        if (services && services.length > 0) {
          console.log('\nüìã Servi√ßos que seriam retornados pela API:');
          services.forEach((service, index) => {
            console.log(`   ${index + 1}. ${service.name} - R$ ${service.price}`);
          });
        }
      }

      this.report.investigation.apiSimulation = {
        success: !error,
        servicesReturned: services?.length || 0,
        error: error?.message || null,
      };
    } catch (error) {
      console.log(`‚ùå Erro na simula√ß√£o: ${error.message}`);
      this.report.findings.push(`Erro na simula√ß√£o da API: ${error.message}`);
    }
  }

  generateInvestigationReport() {
    console.log('\nüìÑ GERANDO RELAT√ìRIO DE INVESTIGA√á√ÉO');
    console.log('-'.repeat(50));

    // An√°lise dos achados
    const findings = this.report.findings;
    const hasServices = (this.report.investigation.partnerServices?.count || 0) > 0;
    const userExists = !!this.report.investigation.user;
    const correctRole = this.report.investigation.user?.profile?.role === 'partner';
    const apiWorks = this.report.investigation.apiSimulation?.success;

    console.log('\nüîç RESUMO DA INVESTIGA√á√ÉO:');
    console.log('='.repeat(50));
    console.log(`üë§ Usu√°rio existe: ${userExists ? '‚úÖ Sim' : '‚ùå N√£o'}`);
    console.log(`üîë Role correta: ${correctRole ? '‚úÖ Sim' : '‚ùå N√£o'}`);
    console.log(
      `üèÜ Servi√ßos cadastrados: ${hasServices ? '‚úÖ Sim' : '‚ùå N√£o'} (${this.report.investigation.partnerServices?.count || 0})`
    );
    console.log(`üåê API funcionando: ${apiWorks ? '‚úÖ Sim' : '‚ùå N√£o'}`);

    // Diagnosticar problema principal
    if (!hasServices && userExists && correctRole) {
      console.log('\nüéØ DIAGN√ìSTICO PRINCIPAL:');
      console.log('‚ùå O parceiro n√£o possui servi√ßos cadastrados');
      console.log('üí° SOLU√á√ÉO: Cadastrar servi√ßos na tabela partner_services');
    } else if (!correctRole && userExists) {
      console.log('\nüéØ DIAGN√ìSTICO PRINCIPAL:');
      console.log('‚ùå O usu√°rio n√£o tem a role "partner"');
      console.log('üí° SOLU√á√ÉO: Atualizar role do usu√°rio no perfil');
    } else if (!userExists) {
      console.log('\nüéØ DIAGN√ìSTICO PRINCIPAL:');
      console.log('‚ùå O usu√°rio n√£o existe no sistema');
      console.log('üí° SOLU√á√ÉO: Criar usu√°rio ou verificar email');
    } else if (!apiWorks) {
      console.log('\nüéØ DIAGN√ìSTICO PRINCIPAL:');
      console.log('‚ùå A API n√£o est√° funcionando corretamente');
      console.log('üí° SOLU√á√ÉO: Verificar implementa√ß√£o da API');
    } else if (hasServices && correctRole && apiWorks) {
      console.log('\nüéØ DIAGN√ìSTICO PRINCIPAL:');
      console.log('‚úÖ Todos os componentes est√£o funcionando');
      console.log('üîç PROBLEMA: Pode ser cache, rede ou frontend');
    }

    if (findings.length > 0) {
      console.log('\nüö® PROBLEMAS IDENTIFICADOS:');
      findings.forEach((finding, index) => {
        console.log(`   ${index + 1}. ${finding}`);
      });
    }

    // Recomenda√ß√µes
    console.log('\nüí° RECOMENDA√á√ïES:');
    if (!hasServices) {
      console.log('   1. Cadastrar servi√ßos para o parceiro na tabela partner_services');
    }
    if (!correctRole) {
      console.log('   2. Verificar e corrigir a role do usu√°rio');
    }
    if (!apiWorks) {
      console.log('   3. Testar e corrigir a implementa√ß√£o da API');
    }
    console.log('   4. Limpar cache do navegador');
    console.log('   5. Verificar logs do servidor para erros');
    console.log('   6. Testar com outro usu√°rio parceiro');

    // Salvar relat√≥rio detalhado
    const reportPath = join(process.cwd(), 'reports', 'partner-services-investigation.json');
    writeFileSync(reportPath, JSON.stringify(this.report, null, 2));

    console.log(`\nüìÑ Relat√≥rio detalhado salvo em: ${reportPath}`);
  }
}

// Executar investiga√ß√£o
const investigator = new PartnerServicesInvestigator();
investigator
  .investigate()
  .then(() => {
    console.log('\nüéâ INVESTIGA√á√ÉO FINALIZADA!');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• ERRO FATAL:', error);
    process.exit(1);
  });
