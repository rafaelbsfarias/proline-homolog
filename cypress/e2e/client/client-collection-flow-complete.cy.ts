describe('Client Collection Flow - Date Change Test', () => {
  let tomorrowDate: string;

  before(() => {
    // Calcular data D+1 uma vez para todos os testes
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrowDate = tomorrow.toISOString().split('T')[0];
  });

  beforeEach(() => {
    // Interceptar chamadas de API para melhor controle
    cy.intercept('POST', '/api/client/set-vehicles-collection').as('setVehiclesCollection');
    cy.intercept('POST', '/api/client/collection-reschedule').as('rescheduleCollection');
  });

  it('should change collection date to D+1 - SIMPLIFIED', () => {
    // ========================================================================================
    // TESTE SIMPLIFICADO: FOCO NO FLUXO ESSENCIAL COM FILTRO
    // ========================================================================================
    cy.log('üöÄ TESTE SIMPLIFICADO: Mudan√ßa de data de coleta');

    // SETUP: LOGIN
    cy.login('cliente@prolineauto.com.br', '123qwe');
    cy.url().should('include', '/dashboard');
    cy.contains('Bem-vindo').should('be.visible');
    cy.log('‚úÖ Login realizado');

    // AGUARDAR CARREGAMENTO
    cy.wait(5000);

    // PASSO 1: FILTRAR POR "AGUARDANDO COLETA" PARA ATIVAR BOT√ïES DE EDI√á√ÉO
    cy.log('üéØ PASSO 1: Filtrando por ve√≠culos aguardando coleta');

    // Clicar no chip de filtro "AGUARDANDO COLETA"
    cy.get('body').then($body => {
      const chips = $body.find(
        'button:contains("AGUARDANDO COLETA"), .status-chip:contains("AGUARDANDO COLETA"), button:contains("Aguardando coleta")'
      );
      if (chips.length > 0) {
        cy.wrap(chips.first()).click({ force: true });
        cy.log('‚úÖ Filtro "AGUARDANDO COLETA" aplicado');
        cy.wait(3000);
      } else {
        cy.log('‚ö†Ô∏è Chip de filtro "AGUARDANDO COLETA" n√£o encontrado');
      }
    });

    // PASSO 2: EXPANDIR DETALHES DOS VE√çCULOS
    cy.log('üöó PASSO 2: Expandindo detalhes dos ve√≠culos');

    // Procurar e clicar em bot√£o de detalhes
    cy.get('body').then($body => {
      const detailButtons = $body.find(
        'button:contains("Mostrar Detalhes"), button.details-button, button:contains("Ver detalhes")'
      );
      if (detailButtons.length > 0) {
        cy.wrap(detailButtons.first()).click({ force: true });
        cy.log('‚úÖ Detalhes expandidos');
        cy.wait(3000);
      } else {
        cy.log('‚ö†Ô∏è Bot√£o de detalhes n√£o encontrado');
      }
    });

    // PASSO 3: CLICAR EM "EDITAR PONTO DE COLETA"
    cy.log('üéØ PASSO 3: Clicando em "Editar ponto de coleta"');

    // Aguardar um momento para garantir que os elementos est√£o prontos
    cy.wait(2000);

    // Procurar bot√£o de editar (deve estar ativo ap√≥s filtro)
    cy.get('body').then($body => {
      const editButtons = $body.find(
        'button:contains("Editar ponto de coleta"), button:contains("Editar Ponto de Coleta")'
      );
      cy.log(`üîç Bot√µes de editar encontrados: ${editButtons.length}`);

      if (editButtons.length > 0) {
        editButtons.each((index, button) => {
          const text = Cypress.$(button).text().trim();
          const isDisabled = Cypress.$(button).is(':disabled');
          const isVisible = Cypress.$(button).is(':visible');
          cy.log(
            `  - Bot√£o ${index + 1}: "${text}" | Desabilitado: ${isDisabled} | Vis√≠vel: ${isVisible}`
          );
        });

        // Tentar clicar no primeiro bot√£o dispon√≠vel
        const firstButton = editButtons.first();
        if (firstButton.is(':visible') && !firstButton.is(':disabled')) {
          cy.wrap(firstButton).click({ force: true });
          cy.log('‚úÖ Bot√£o de editar clicado');
        } else {
          cy.log('‚ö†Ô∏è Bot√£o de editar encontrado mas n√£o est√° dispon√≠vel para clique');
          throw new Error('Bot√£o de editar n√£o est√° dispon√≠vel para clique');
        }
      } else {
        cy.log('‚ùå Bot√£o "Editar ponto de coleta" n√£o encontrado');
        // Listar todos os bot√µes dispon√≠veis para debug
        const allButtons = $body.find('button');
        cy.log(`üìã Total de bot√µes: ${allButtons.length}`);
        allButtons.each((index, button) => {
          const text = Cypress.$(button).text().trim();
          if (text && text.length < 50) {
            cy.log(`  - "${text}"`);
          }
        });
        throw new Error('Bot√£o de editar n√£o encontrado');
      }
    });

    // PASSO 4: VERIFICAR MODAL E ALTERAR DATA
    cy.log('üìÖ PASSO 4: Verificando abertura do modal');

    // Aguardar um momento ap√≥s o clique
    cy.wait(3000);

    // Verificar se o modal apareceu
    cy.get('body').then($body => {
      const modal = $body.find('.rcm-modal, .modal, [role="dialog"]');
      const modalCount = modal.length;
      cy.log(`üîç Modais encontrados: ${modalCount}`);

      if (modalCount > 0) {
        cy.log('‚úÖ Modal encontrado');
        modal.each((index, modalElement) => {
          const modalText = Cypress.$(modalElement).text().substring(0, 200);
          cy.log(`  - Modal ${index + 1}: "${modalText}..."`);
        });
      } else {
        cy.log('‚ùå Nenhum modal encontrado na p√°gina');
        // Verificar se houve alguma mudan√ßa na p√°gina
        const currentText = $body.text();
        cy.log(`üìÑ Estado atual da p√°gina: ${currentText.substring(0, 500)}...`);
        throw new Error('Modal n√£o foi aberto ap√≥s clicar no bot√£o editar');
      }
    });

    // Tentar diferentes seletores para o modal
    cy.get('body').then($body => {
      if ($body.find('.rcm-modal').length > 0) {
        cy.get('.rcm-modal', { timeout: 5000 }).should('be.visible');
        cy.log('‚úÖ Modal .rcm-modal encontrado e vis√≠vel');
      } else if ($body.find('.modal').length > 0) {
        cy.get('.modal', { timeout: 5000 }).should('be.visible');
        cy.log('‚úÖ Modal .modal encontrado e vis√≠vel');
      } else if ($body.find('[role="dialog"]').length > 0) {
        cy.get('[role="dialog"]', { timeout: 5000 }).should('be.visible');
        cy.log('‚úÖ Modal [role="dialog"] encontrado e vis√≠vel');
      }
    });

    // Verificar se o t√≠tulo do modal est√° presente
    cy.get('body').then($body => {
      if ($body.text().includes('Editar ponto de coleta')) {
        cy.contains('Editar ponto de coleta').should('be.visible');
        cy.log('‚úÖ T√≠tulo do modal encontrado');
      } else {
        cy.log('‚ö†Ô∏è T√≠tulo "Editar ponto de coleta" n√£o encontrado');
      }
    });

    // Alterar data
    cy.get('.rcm-date-input').clear().type(tomorrowDate);
    cy.log(`‚úÖ Data alterada para: ${tomorrowDate}`);

    // Salvar
    cy.get('.rcm-btn-primary').click({ force: true });
    cy.log('‚úÖ Altera√ß√µes salvas');

    // Verifica√ß√µes finais
    cy.url().should('include', '/dashboard');
    cy.log('‚úÖ Teste simplificado conclu√≠do');
  });

  it('should navigate to collection editing screen', () => {
    // ========================================================================================
    // TESTE SIMPLES: APENAS NAVEGAR AT√â A TELA DE EDI√á√ÉO
    // ========================================================================================
    cy.log('üß™ TESTE SIMPLES: Navegando at√© tela de edi√ß√£o de coleta');

    // Login
    cy.login('cliente@prolineauto.com.br', '123qwe');
    cy.url().should('include', '/dashboard');

    // Verificar se estamos no dashboard
    cy.contains('Bem-vindo').should('be.visible');
    cy.log('‚úÖ Login realizado');

    // Verificar conte√∫do da p√°gina
    cy.get('body').then($body => {
      const bodyText = $body.text();
      cy.log(`üìÑ Conte√∫do da p√°gina: ${bodyText.substring(0, 500)}...`);

      // Verificar se h√° men√ß√£o a ve√≠culos ou coleta
      if (bodyText.includes('ve√≠culo') || bodyText.includes('coleta')) {
        cy.log('‚úÖ P√°gina cont√©m refer√™ncias a ve√≠culos/coleta');
      } else {
        cy.log('‚ö†Ô∏è P√°gina n√£o cont√©m refer√™ncias claras a ve√≠culos/coleta');
      }

      // Listar todos os bot√µes dispon√≠veis
      const buttons = $body.find('button');
      cy.log(`üìã Bot√µes encontrados: ${buttons.length}`);

      buttons.each((index, button) => {
        const buttonText = Cypress.$(button).text().trim();
        if (buttonText) {
          cy.log(`  - Bot√£o ${index + 1}: "${buttonText}"`);
        }
      });

      // Verificar se h√° algum modal j√° aberto
      const modals = $body.find('.modal, .rcm-modal, [role="dialog"]');
      if (modals.length > 0) {
        cy.log(`‚úÖ Modal encontrado: ${modals.length}`);
      } else {
        cy.log('‚ö†Ô∏è Nenhum modal encontrado');
      }
    });

    cy.log('‚úÖ Teste de navega√ß√£o conclu√≠do');
  });
});
